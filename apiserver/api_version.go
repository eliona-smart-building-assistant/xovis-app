// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Xovis app API
 *
 * API to access and configure the Xovis app
 *
 * API version: 1.0.0
 */

package apiserver

import (
	"net/http"
	"strings"
)

// VersionAPIController binds http requests to an api service and writes the service results to the http response
type VersionAPIController struct {
	service      VersionAPIServicer
	errorHandler ErrorHandler
}

// VersionAPIOption for how the controller is set up.
type VersionAPIOption func(*VersionAPIController)

// WithVersionAPIErrorHandler inject ErrorHandler into controller
func WithVersionAPIErrorHandler(h ErrorHandler) VersionAPIOption {
	return func(c *VersionAPIController) {
		c.errorHandler = h
	}
}

// NewVersionAPIController creates a default api controller
func NewVersionAPIController(s VersionAPIServicer, opts ...VersionAPIOption) *VersionAPIController {
	controller := &VersionAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the VersionAPIController
func (c *VersionAPIController) Routes() Routes {
	return Routes{
		"GetVersion": Route{
			strings.ToUpper("Get"),
			"/v1/version",
			c.GetVersion,
		},
		"GetOpenAPI": Route{
			strings.ToUpper("Get"),
			"/v1/version/openapi.json",
			c.GetOpenAPI,
		},
	}
}

// GetVersion - Version of the API
func (c *VersionAPIController) GetVersion(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetVersion(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOpenAPI - OpenAPI specification for this API version
func (c *VersionAPIController) GetOpenAPI(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetOpenAPI(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
