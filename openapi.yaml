openapi: 3.0.3

#  This file is part of the Eliona project.
#  Copyright Â© 2024 IoTEC AG. All Rights Reserved.
#  ______ _ _
# |  ____| (_)
# | |__  | |_  ___  _ __   __ _
# |  __| | | |/ _ \| '_ \ / _` |
# | |____| | | (_) | | | | (_| |
# |______|_|_|\___/|_| |_|\__,_|
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
#  BUT NOT LIMITED  TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#  NON INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
#  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

info:
  version: 1.0.0
  title: Xovis app API
  description: API to access and configure the Xovis app
externalDocs:
  description: Find out more about the Xovis app
  url: https://github.com/eliona-smart-building-assistant/xovis-app
servers:
  - url: "https://{server}/v1"
    variables:
      server:
        default: xovis
  - url: "https://{environment}.eliona.io/apps/xovis/api/v1"
    variables:
      environment:
        default: name

tags:
  - name: Configuration
    description: Configure the app
    externalDocs:
      url: https://github.com/eliona-smart-building-assistant/xovis-app

  - name: Version
    description: API version
    externalDocs:
      url: https://github.com/eliona-smart-building-assistant/xovis-app

  - name: Customization
    description: Help to customize Eliona environment
    externalDocs:
      url: https://github.com/eliona-smart-building-assistant/xovis-app

paths:
  /configs:
    get:
      tags:
        - Configuration
      summary: Get configurations
      description: Gets information about all configurations.
      operationId: getConfigurations
      responses:
        "200":
          description: Successfully returned all configurations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Configuration"
    post:
      tags:
        - Configuration
      summary: Creates a configuration
      description: Creates a configuration.
      operationId: postConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Configuration"
      responses:
        "201":
          description: Successfully created a configuration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Configuration"

  /configs/{config-id}:
    get:
      tags:
        - Configuration
      summary: Get configuration
      description: Gets information about the configuration with the given id
      parameters:
        - $ref: "#/components/parameters/config-id"
      operationId: getConfigurationById
      responses:
        "200":
          description: Successfully returned configuration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Configuration"
        "400":
          description: Bad request
    put:
      tags:
        - Configuration
      summary: Updates a configuration
      description: Updates a configuration
      parameters:
        - $ref: "#/components/parameters/config-id"
      operationId: putConfigurationById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Configuration"
      responses:
        "200":
          description: Successfully updated a configuration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Configuration"
    delete:
      tags:
        - Configuration
      summary: Deletes a configuration
      description: Removes information about the configuration with the given id
      parameters:
        - $ref: "#/components/parameters/config-id"
      operationId: deleteConfigurationById
      responses:
        "204":
          description: Successfully deleted configured configuration
        "400":
          description: Bad request

  /sensors:
    get:
      summary: Get list of sensors
      tags:
        - Configuration
      responses:
        200:
          description: List of sensors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Sensor"
        500:
          description: Internal Server Error

    post:
      summary: Create a new sensor
      tags:
        - Configuration
      requestBody:
        description: Sensor to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SensorCreateUpdate"
      responses:
        201:
          description: Sensor created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sensor"
        400:
          description: Bad Request
        500:
          description: Internal Server Error

  /sensors/{id}:
    get:
      summary: Get a specific sensor
      tags:
        - Configuration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Sensor details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sensor"
        404:
          description: Sensor not found
        500:
          description: Internal Server Error

    put:
      summary: Update a sensor
      tags:
        - Configuration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Sensor data to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SensorCreateUpdate"
      responses:
        200:
          description: Sensor updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sensor"
        400:
          description: Bad Request
        404:
          description: Sensor not found
        500:
          description: Internal Server Error

    delete:
      summary: Delete a sensor
      tags:
        - Configuration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Sensor deleted successfully
        404:
          description: Sensor not found
        500:
          description: Internal Server Error

  /version:
    get:
      summary: Version of the API
      description: Gets information about the APIs version.
      operationId: getVersion
      tags:
        - Version
      responses:
        "200":
          description: Successfully returned the APIs version.
          content:
            application/json:
              schema:
                type: object

  /version/openapi.json:
    get:
      summary: OpenAPI specification for this API version
      description: Gets specification for this API version as an openapi.json file.
      operationId: getOpenAPI
      tags:
        - Version
      responses:
        "200":
          description: Successfully returned the openapi.json file.
          content:
            application/json:
              schema:
                type: object

  /dashboard-templates/{dashboard-template-name}:
    get:
      tags:
        - Customization
      summary: Get a full dashboard template
      description: Delivers a dashboard template which can assigned to users in Eliona
      externalDocs:
        description: The API to assign the dashboard to users in Eliona (see post /dashboards endpoint).
        url: https://github.com/eliona-smart-building-assistant/eliona-api
      operationId: getDashboardTemplateByName
      parameters:
        - name: dashboard-template-name
          in: path
          description: Name of the dashboard template
          required: true
          schema:
            type: string
            example: Template
        - name: projectId
          in: query
          description: Define the project the dashboard should be
          required: true
          schema:
            type: string
            example: 99
      responses:
        "200":
          description: Successfully returned dashboard template
          content:
            application/json:
              schema:
                $ref: "https://raw.githubusercontent.com/eliona-smart-building-assistant/eliona-api/main/openapi.yaml#/components/schemas/Dashboard"
        "404":
          description: Template name not found

components:
  parameters:
    config-id:
      name: config-id
      in: path
      description: The id of the config
      example: 4711
      required: true
      schema:
        type: integer
        format: int64
        example: 4711

  schemas:
    Configuration:
      type: object
      description: Each configuration defines access to provider's API.
      properties:
        id:
          type: integer
          format: int64
          description: Internal identifier for the configured API (created automatically).
          readOnly: true
          nullable: true
        checkCertificate:
          type: boolean
          description: Specifies whether the device certificate should be verified (should be true for devices publicly accessible, can be false for devices inaccessible from the Internet).
          example: 443
        enable:
          type: boolean
          description: Flag to enable or disable fetching from this API
          default: true
          nullable: true
        refreshInterval:
          type: integer
          description: Interval in seconds for collecting data from API
          default: 60
        requestTimeout:
          type: integer
          description: Timeout in seconds
          default: 120
          nullable: true
        active:
          type: boolean
          readOnly: true
          description: Set to `true` by the app when running and to `false` when app is stopped
          nullable: true
        projectIDs:
          type: array
          description: List of Eliona project ids for which this device should collect data. For each project id all smart devices are automatically created as an asset in Eliona. The mapping between Eliona is stored as an asset mapping in the KentixONE app.
          nullable: true
          items:
            type: string
          example:
            - "42"
            - "99"
        userId:
          type: string
          readOnly: true
          description: ID of the last Eliona user who created or updated the configuration
          nullable: true
          example: "90"

    Sensor:
      type: object
      properties:
        id:
          type: integer
          example: 1
        configuration_id:
          type: integer
          example: 100
        username:
          type: string
          example: admin
        password:
          type: string
          example: securepassword
        hostname:
          type: string
          example: sensor.local
        port:
          type: integer
          example: 443
        discovery_mode:
          type: string
          enum:
            - disabled
            - L2
            - L3
          example: L2
        l3_first_ip:
          type: string
          nullable: true
          example: 192.168.1.10
        l3_count:
          type: integer
          nullable: true
          example: 100

    SensorCreateUpdate:
      allOf:
        - $ref: "#/components/schemas/Sensor"
        - type: object
          required:
            - configuration_id
            - username
            - password
            - hostname
            - port
            - discovery_mode
