// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package appdb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Sensor is an object representing the database table.
type Sensor struct {
	ID              int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ConfigurationID int64       `boil:"configuration_id" json:"configuration_id" toml:"configuration_id" yaml:"configuration_id"`
	Username        string      `boil:"username" json:"username" toml:"username" yaml:"username"`
	Password        string      `boil:"password" json:"password" toml:"password" yaml:"password"`
	Hostname        string      `boil:"hostname" json:"hostname" toml:"hostname" yaml:"hostname"`
	Port            int32       `boil:"port" json:"port" toml:"port" yaml:"port"`
	DiscoveryMode   string      `boil:"discovery_mode" json:"discovery_mode" toml:"discovery_mode" yaml:"discovery_mode"`
	L3FirstIP       null.String `boil:"l3_first_ip" json:"l3_first_ip,omitempty" toml:"l3_first_ip" yaml:"l3_first_ip,omitempty"`
	L3Count         null.Int32  `boil:"l3_count" json:"l3_count,omitempty" toml:"l3_count" yaml:"l3_count,omitempty"`
	MacAddress      null.String `boil:"mac_address" json:"mac_address,omitempty" toml:"mac_address" yaml:"mac_address,omitempty"`

	R *sensorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sensorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SensorColumns = struct {
	ID              string
	ConfigurationID string
	Username        string
	Password        string
	Hostname        string
	Port            string
	DiscoveryMode   string
	L3FirstIP       string
	L3Count         string
	MacAddress      string
}{
	ID:              "id",
	ConfigurationID: "configuration_id",
	Username:        "username",
	Password:        "password",
	Hostname:        "hostname",
	Port:            "port",
	DiscoveryMode:   "discovery_mode",
	L3FirstIP:       "l3_first_ip",
	L3Count:         "l3_count",
	MacAddress:      "mac_address",
}

var SensorTableColumns = struct {
	ID              string
	ConfigurationID string
	Username        string
	Password        string
	Hostname        string
	Port            string
	DiscoveryMode   string
	L3FirstIP       string
	L3Count         string
	MacAddress      string
}{
	ID:              "sensor.id",
	ConfigurationID: "sensor.configuration_id",
	Username:        "sensor.username",
	Password:        "sensor.password",
	Hostname:        "sensor.hostname",
	Port:            "sensor.port",
	DiscoveryMode:   "sensor.discovery_mode",
	L3FirstIP:       "sensor.l3_first_ip",
	L3Count:         "sensor.l3_count",
	MacAddress:      "sensor.mac_address",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var SensorWhere = struct {
	ID              whereHelperint64
	ConfigurationID whereHelperint64
	Username        whereHelperstring
	Password        whereHelperstring
	Hostname        whereHelperstring
	Port            whereHelperint32
	DiscoveryMode   whereHelperstring
	L3FirstIP       whereHelpernull_String
	L3Count         whereHelpernull_Int32
	MacAddress      whereHelpernull_String
}{
	ID:              whereHelperint64{field: "\"xovis\".\"sensor\".\"id\""},
	ConfigurationID: whereHelperint64{field: "\"xovis\".\"sensor\".\"configuration_id\""},
	Username:        whereHelperstring{field: "\"xovis\".\"sensor\".\"username\""},
	Password:        whereHelperstring{field: "\"xovis\".\"sensor\".\"password\""},
	Hostname:        whereHelperstring{field: "\"xovis\".\"sensor\".\"hostname\""},
	Port:            whereHelperint32{field: "\"xovis\".\"sensor\".\"port\""},
	DiscoveryMode:   whereHelperstring{field: "\"xovis\".\"sensor\".\"discovery_mode\""},
	L3FirstIP:       whereHelpernull_String{field: "\"xovis\".\"sensor\".\"l3_first_ip\""},
	L3Count:         whereHelpernull_Int32{field: "\"xovis\".\"sensor\".\"l3_count\""},
	MacAddress:      whereHelpernull_String{field: "\"xovis\".\"sensor\".\"mac_address\""},
}

// SensorRels is where relationship names are stored.
var SensorRels = struct {
	Configuration string
}{
	Configuration: "Configuration",
}

// sensorR is where relationships are stored.
type sensorR struct {
	Configuration *Configuration `boil:"Configuration" json:"Configuration" toml:"Configuration" yaml:"Configuration"`
}

// NewStruct creates a new relationship struct
func (*sensorR) NewStruct() *sensorR {
	return &sensorR{}
}

func (r *sensorR) GetConfiguration() *Configuration {
	if r == nil {
		return nil
	}
	return r.Configuration
}

// sensorL is where Load methods for each relationship are stored.
type sensorL struct{}

var (
	sensorAllColumns            = []string{"id", "configuration_id", "username", "password", "hostname", "port", "discovery_mode", "l3_first_ip", "l3_count", "mac_address"}
	sensorColumnsWithoutDefault = []string{"username", "password", "hostname", "port", "discovery_mode"}
	sensorColumnsWithDefault    = []string{"id", "configuration_id", "l3_first_ip", "l3_count", "mac_address"}
	sensorPrimaryKeyColumns     = []string{"id"}
	sensorGeneratedColumns      = []string{}
)

type (
	// SensorSlice is an alias for a slice of pointers to Sensor.
	// This should almost always be used instead of []Sensor.
	SensorSlice []*Sensor
	// SensorHook is the signature for custom Sensor hook methods
	SensorHook func(context.Context, boil.ContextExecutor, *Sensor) error

	sensorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sensorType                 = reflect.TypeOf(&Sensor{})
	sensorMapping              = queries.MakeStructMapping(sensorType)
	sensorPrimaryKeyMapping, _ = queries.BindMapping(sensorType, sensorMapping, sensorPrimaryKeyColumns)
	sensorInsertCacheMut       sync.RWMutex
	sensorInsertCache          = make(map[string]insertCache)
	sensorUpdateCacheMut       sync.RWMutex
	sensorUpdateCache          = make(map[string]updateCache)
	sensorUpsertCacheMut       sync.RWMutex
	sensorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sensorAfterSelectMu sync.Mutex
var sensorAfterSelectHooks []SensorHook

var sensorBeforeInsertMu sync.Mutex
var sensorBeforeInsertHooks []SensorHook
var sensorAfterInsertMu sync.Mutex
var sensorAfterInsertHooks []SensorHook

var sensorBeforeUpdateMu sync.Mutex
var sensorBeforeUpdateHooks []SensorHook
var sensorAfterUpdateMu sync.Mutex
var sensorAfterUpdateHooks []SensorHook

var sensorBeforeDeleteMu sync.Mutex
var sensorBeforeDeleteHooks []SensorHook
var sensorAfterDeleteMu sync.Mutex
var sensorAfterDeleteHooks []SensorHook

var sensorBeforeUpsertMu sync.Mutex
var sensorBeforeUpsertHooks []SensorHook
var sensorAfterUpsertMu sync.Mutex
var sensorAfterUpsertHooks []SensorHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Sensor) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Sensor) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Sensor) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Sensor) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Sensor) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Sensor) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Sensor) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Sensor) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Sensor) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSensorHook registers your hook function for all future operations.
func AddSensorHook(hookPoint boil.HookPoint, sensorHook SensorHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sensorAfterSelectMu.Lock()
		sensorAfterSelectHooks = append(sensorAfterSelectHooks, sensorHook)
		sensorAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		sensorBeforeInsertMu.Lock()
		sensorBeforeInsertHooks = append(sensorBeforeInsertHooks, sensorHook)
		sensorBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		sensorAfterInsertMu.Lock()
		sensorAfterInsertHooks = append(sensorAfterInsertHooks, sensorHook)
		sensorAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		sensorBeforeUpdateMu.Lock()
		sensorBeforeUpdateHooks = append(sensorBeforeUpdateHooks, sensorHook)
		sensorBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		sensorAfterUpdateMu.Lock()
		sensorAfterUpdateHooks = append(sensorAfterUpdateHooks, sensorHook)
		sensorAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		sensorBeforeDeleteMu.Lock()
		sensorBeforeDeleteHooks = append(sensorBeforeDeleteHooks, sensorHook)
		sensorBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		sensorAfterDeleteMu.Lock()
		sensorAfterDeleteHooks = append(sensorAfterDeleteHooks, sensorHook)
		sensorAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		sensorBeforeUpsertMu.Lock()
		sensorBeforeUpsertHooks = append(sensorBeforeUpsertHooks, sensorHook)
		sensorBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		sensorAfterUpsertMu.Lock()
		sensorAfterUpsertHooks = append(sensorAfterUpsertHooks, sensorHook)
		sensorAfterUpsertMu.Unlock()
	}
}

// OneG returns a single sensor record from the query using the global executor.
func (q sensorQuery) OneG(ctx context.Context) (*Sensor, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single sensor record from the query.
func (q sensorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Sensor, error) {
	o := &Sensor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: failed to execute a one query for sensor")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Sensor records from the query using the global executor.
func (q sensorQuery) AllG(ctx context.Context) (SensorSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Sensor records from the query.
func (q sensorQuery) All(ctx context.Context, exec boil.ContextExecutor) (SensorSlice, error) {
	var o []*Sensor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "appdb: failed to assign all query results to Sensor slice")
	}

	if len(sensorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Sensor records in the query using the global executor
func (q sensorQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Sensor records in the query.
func (q sensorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to count sensor rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q sensorQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q sensorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "appdb: failed to check if sensor exists")
	}

	return count > 0, nil
}

// Configuration pointed to by the foreign key.
func (o *Sensor) Configuration(mods ...qm.QueryMod) configurationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ConfigurationID),
	}

	queryMods = append(queryMods, mods...)

	return Configurations(queryMods...)
}

// LoadConfiguration allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sensorL) LoadConfiguration(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSensor interface{}, mods queries.Applicator) error {
	var slice []*Sensor
	var object *Sensor

	if singular {
		var ok bool
		object, ok = maybeSensor.(*Sensor)
		if !ok {
			object = new(Sensor)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSensor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSensor))
			}
		}
	} else {
		s, ok := maybeSensor.(*[]*Sensor)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSensor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSensor))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &sensorR{}
		}
		args[object.ConfigurationID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sensorR{}
			}

			args[obj.ConfigurationID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`xovis.configuration`),
		qm.WhereIn(`xovis.configuration.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Configuration")
	}

	var resultSlice []*Configuration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Configuration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for configuration")
	}

	if len(configurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Configuration = foreign
		if foreign.R == nil {
			foreign.R = &configurationR{}
		}
		foreign.R.Sensors = append(foreign.R.Sensors, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ConfigurationID == foreign.ID {
				local.R.Configuration = foreign
				if foreign.R == nil {
					foreign.R = &configurationR{}
				}
				foreign.R.Sensors = append(foreign.R.Sensors, local)
				break
			}
		}
	}

	return nil
}

// SetConfigurationG of the sensor to the related item.
// Sets o.R.Configuration to related.
// Adds o to related.R.Sensors.
// Uses the global database handle.
func (o *Sensor) SetConfigurationG(ctx context.Context, insert bool, related *Configuration) error {
	return o.SetConfiguration(ctx, boil.GetContextDB(), insert, related)
}

// SetConfiguration of the sensor to the related item.
// Sets o.R.Configuration to related.
// Adds o to related.R.Sensors.
func (o *Sensor) SetConfiguration(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Configuration) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"xovis\".\"sensor\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"configuration_id"}),
		strmangle.WhereClause("\"", "\"", 2, sensorPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ConfigurationID = related.ID
	if o.R == nil {
		o.R = &sensorR{
			Configuration: related,
		}
	} else {
		o.R.Configuration = related
	}

	if related.R == nil {
		related.R = &configurationR{
			Sensors: SensorSlice{o},
		}
	} else {
		related.R.Sensors = append(related.R.Sensors, o)
	}

	return nil
}

// Sensors retrieves all the records using an executor.
func Sensors(mods ...qm.QueryMod) sensorQuery {
	mods = append(mods, qm.From("\"xovis\".\"sensor\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"xovis\".\"sensor\".*"})
	}

	return sensorQuery{q}
}

// FindSensorG retrieves a single record by ID.
func FindSensorG(ctx context.Context, iD int64, selectCols ...string) (*Sensor, error) {
	return FindSensor(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindSensor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSensor(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Sensor, error) {
	sensorObj := &Sensor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"xovis\".\"sensor\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sensorObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: unable to select from sensor")
	}

	if err = sensorObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sensorObj, err
	}

	return sensorObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Sensor) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Sensor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("appdb: no sensor provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sensorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sensorInsertCacheMut.RLock()
	cache, cached := sensorInsertCache[key]
	sensorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sensorAllColumns,
			sensorColumnsWithDefault,
			sensorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sensorType, sensorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sensorType, sensorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"xovis\".\"sensor\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"xovis\".\"sensor\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "appdb: unable to insert into sensor")
	}

	if !cached {
		sensorInsertCacheMut.Lock()
		sensorInsertCache[key] = cache
		sensorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Sensor record using the global executor.
// See Update for more documentation.
func (o *Sensor) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Sensor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Sensor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sensorUpdateCacheMut.RLock()
	cache, cached := sensorUpdateCache[key]
	sensorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sensorAllColumns,
			sensorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("appdb: unable to update sensor, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"xovis\".\"sensor\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sensorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sensorType, sensorMapping, append(wl, sensorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update sensor row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by update for sensor")
	}

	if !cached {
		sensorUpdateCacheMut.Lock()
		sensorUpdateCache[key] = cache
		sensorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q sensorQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q sensorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all for sensor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected for sensor")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SensorSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SensorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("appdb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sensorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"xovis\".\"sensor\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sensorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all in sensor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected all in update all sensor")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Sensor) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Sensor) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("appdb: no sensor provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sensorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sensorUpsertCacheMut.RLock()
	cache, cached := sensorUpsertCache[key]
	sensorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			sensorAllColumns,
			sensorColumnsWithDefault,
			sensorColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sensorAllColumns,
			sensorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("appdb: unable to upsert sensor, could not build update column list")
		}

		ret := strmangle.SetComplement(sensorAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(sensorPrimaryKeyColumns) == 0 {
				return errors.New("appdb: unable to upsert sensor, could not build conflict column list")
			}

			conflict = make([]string, len(sensorPrimaryKeyColumns))
			copy(conflict, sensorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"xovis\".\"sensor\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(sensorType, sensorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sensorType, sensorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "appdb: unable to upsert sensor")
	}

	if !cached {
		sensorUpsertCacheMut.Lock()
		sensorUpsertCache[key] = cache
		sensorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Sensor record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Sensor) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Sensor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Sensor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("appdb: no Sensor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sensorPrimaryKeyMapping)
	sql := "DELETE FROM \"xovis\".\"sensor\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete from sensor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by delete for sensor")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q sensorQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q sensorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("appdb: no sensorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from sensor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for sensor")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o SensorSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SensorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sensorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sensorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"xovis\".\"sensor\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sensorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from sensor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for sensor")
	}

	if len(sensorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Sensor) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: no Sensor provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Sensor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSensor(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SensorSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: empty SensorSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SensorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SensorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sensorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"xovis\".\"sensor\".* FROM \"xovis\".\"sensor\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sensorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "appdb: unable to reload all in SensorSlice")
	}

	*o = slice

	return nil
}

// SensorExistsG checks if the Sensor row exists.
func SensorExistsG(ctx context.Context, iD int64) (bool, error) {
	return SensorExists(ctx, boil.GetContextDB(), iD)
}

// SensorExists checks if the Sensor row exists.
func SensorExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"xovis\".\"sensor\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "appdb: unable to check if sensor exists")
	}

	return exists, nil
}

// Exists checks if the Sensor row exists.
func (o *Sensor) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SensorExists(ctx, exec, o.ID)
}
